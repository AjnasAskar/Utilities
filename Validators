import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class Validator {
  Validator.__();

  static String? validateMobile(BuildContext context, String value, int? maxLength) {
    String pattern = r'^-?(([0-9]*)|(([0-9]*)\.([0-9]*)))$';
    RegExp regExp = RegExp(pattern);
    if (!regExp.hasMatch(value) || (maxLength != null && value.length != maxLength)) {
      return "Please enter a valid mobile number";
    }
    return null;
  }

  static bool validateIsMobileNumber(String value, int? maxLength) {
    String pattern = r'^-?(([0-9]*)|(([0-9]*)\.([0-9]*)))$';
    RegExp regExp = RegExp(pattern);
    if (!regExp.hasMatch(value) || (maxLength != null && value.length != maxLength)) {
      return false;
    } else {
      return true;
    }
  }

  static String? validateMobileNoLimit(BuildContext context, String value) {
    String pattern = r'(^(?:[+0]9)?[0-9]{10,12}$)';
    RegExp regExp =  RegExp(pattern);
    if(!regExp.hasMatch(value) || value.isEmpty){
      return "Please enter a valid mobile number";
    }
  }

  static String? validateName(BuildContext context, String? value) {
    final translate = S.of(context);
    if (value == null || value.isEmpty) {
      return 'The field can\'t be empty';
    } else if (value.length < 3) {
      return 'Name must be more than 3 character';
    }
    return null;
  }

  static String? validateLastName(BuildContext context, String? value) {
    return (value == null || value.isEmpty) ? 'The field can\'t be empty' : null;
  }

  static String? validateText(BuildContext context, String value) {
    return (value.trim().isEmpty) ? 'The field can\'t be empty' : null;
  }

  static String? validateInvalidateOtp(BuildContext context, String? value) {
    final translate = S.of(context);
    if (value == null || value.isEmpty) {
      return 'The field can\'t be empty';
    } else if (value.length != 6) {
      return 'Invalid OTP, Try Again';
    }
    return null;
  }

  static String? validatePassword(BuildContext context, String value) {
    final translate = S.of(context);
    if (value.length < 8) {
      return 'Password must contain letters and numbers and be 6-16 characters.';
    } else if (!value.contains(RegExp(r'[0-9]'))) {
      return 'Password must contain at least one number';
    } else if (!value.contains(RegExp(r'[!@#$%^&*(),.?":{}|<>]'))) {
      return 'Must contain at least one special character';
    } else if (!value.contains(RegExp(r'[A-Z]'))) {
      return 'Password must contain at least one capital letter';
    }
    return null;
  }

  static bool validateIsEmail(String value) {
    const pattern =
        r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
    RegExp regex = RegExp(pattern);
    if (!regex.hasMatch(value)) {
      return false;
    } else {
      return true;
    }
  }

  static String? validateEmail(BuildContext context, String value) {
    String pattern =
        r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
    RegExp regex = RegExp(pattern);
    if (!regex.hasMatch(value)) {
      return 'Enter a valid email address';
    } else {
      return null;
    }
  }

  static String? validateCity(String value) {
    if (value.trim().isEmpty) {
      return 'Enter city';
    } else {
      return null;
    }
  }

  static String? validateCurrentPassword(String value) {
    if (value.trim().isEmpty) {
      return 'Enter current password';
    }
    else {
      return null;
    }
  }

  static List<TextInputFormatter>? inputFormatter(String text) {
    List<TextInputFormatter>? val;
    switch (text) {
      case "phoneNo":
        val = [
          FilteringTextInputFormatter.allow(RegExp("[0-9]")),
        ];
        break;

      case "password":
        val = [
          FilteringTextInputFormatter.allow(RegExp("[0-9a-zA-Z@]")),
        ];
        break;
      case "name":
        val = [FilteringTextInputFormatter.allow(RegExp(r"[a-zA-Z]+|\s"))];
        break;
    }
    return val;
  }
}
